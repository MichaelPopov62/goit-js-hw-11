{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["\n/*Призначення: Виконання HTTP-запитів до API Pixabay і повернення даних.\n\nФункції:\ngetImagesByQuery(query):\n  1.Формує параметри запиту (пошуковий запит, ключ API, кількість результатів тощо).\n  2.Використовує axios для виконання запиту.\n  3.Повертає дані (об'єкт із масивом зображень hits)\n  4.Передає помилки, якщо запит не вдався.\n\n        Зв'язок із main.js:\n  1.Імпортується в main.js.\n  2.Викликається при кожному пошуку для отримання даних.*/\n\n\n\n// Імпортую бібліотеку для HTTP-запитів\n  import axios from 'axios';\n\n//Створюю константи для роботи з API Pixabay\n  const API_KEY = '50290691-d51719558e36c91c48babc26d'; // Мій унікальний  API-ключ сервісу Pexibay\n  \n  const BASE_URL = 'https://pixabay.com/api/'; // Базова URL-адреса для запитів\n\n\n\n// Функція для отримання зображень за пошуковим запитом\nexport function getImagesByQuery(query) {\n    \n  // перевірка отриманого параметра функції\n  // console.log('Виклик функції getImagesByQuery із запитом:', query);\n\n/*Створюю змінну де кладу параметри запиту, які будуть передані у URL.Використовуючи цю змінну, я передаю параметри у функцію axios.get, яка додає їх до запиту в форматі URL-параметрів (query string).*/\n  const params = {\n    key: API_KEY, // Мій ключ для автентифікації\n    q: query, // Пошукове слово, що користувач ввів в пошукове поле\n    image_type: 'photo', // фільтрую лише зображення\n    orientation: 'horizontal', // Орієнтація зображень-горізогтальна\n    safesearch: true, // Фільтр для безпечного пошуку\n    per_page: 40, // Максимальна кількість результатів за запитом\n  };\n\n  //  перевіряю параметри запитуу створеному об'єкті\n  // console.log('Параметри запиту сформовані:', params);\n\n/*Виконуємо GET-запит.Ця функція повертає Promise, який вирішується в об'єкт із даними від API\nЦей рядок виконує HTTP-запит за допомогою бібліотеки axios. Він повертає проміс, який буде вирішений після завершення запиту.*/\n  return (\n    axios\n      .get(BASE_URL, { params }) // GET-запит на сервер з базовою URL і параметрами\n\n      //Успішний результат (об'єкт відповіді) обробляється в цьому блоці. Використовується стрілкова функція, щоб повернути лише дані відповіді (response.data).\n      .then(response => response.data)\n\n      //У разі помилки в процесі запиту вона передається далі за допомогою throw error;. Це дозволяє обробити помилку в обробнику catch() у місці виклику цієї функції.\n      .catch(error => {\n        throw error;\n      })\n  );\n}\n","\n/*Призначення:\nВідповідає за створення, оновлення та очищення галереї зображень, а також за інтеграцію лайтбоксу (SimpleLightbox).\n\nФункції:\n1.createGallery(images):\n  -Приймає масив об'єктів із зображеннями (дані від API).\n  -Створює HTML-розмітку для галереї.\n  -Додає цю розмітку до контейнера .gallery.\n  -Ініціалізує або оновлює SimpleLightbox для роботи з галереєю.\n2.clearGallery():\n -Очищає контейнер галереї.\n3.showLoader():\n-Додає клас loading до тега <body>, активуючи стилі лоадера (визначені в CSS).\n4.hideLoader():\n  -Видаляє клас loading із тега <body>.*/\n\n\n\n// Імпортую бібліотеку для лайтбоксу\n  import SimpleLightbox from 'simplelightbox';\n  import 'simplelightbox/dist/simple-lightbox.min.css';\n\n// Знаходжу контейнер для галереї\n  const galleryContainer = document.querySelector('.gallery'); // Вибираю елемент галереї за класом \"gallery\"\n\n// перевірка елемента галереї\n// console.log('Контейнер галереї знайдено:', galleryContainer);\n\n  let lightbox = null; // Змінна для екземпляра SimpleLightbox\n// console.log('Ініціалізовано змінну для SimpleLightbox:', lightbox); // перевіряю початкового значення змінної\n\n// Функція для створення галереї з масиву зображень\nexport function createGallery(images) {\n    \n  //console.log('Виклик функції createGallery з масивом зображень:', images); //  отримую зображення\n\n// Генерую HTML-розмітку для кожного елемента з масиву зображень \n  const markup = images\n    .map(\n      ({\n        webformatURL, // URL для відображення маленького зображення\n        largeImageURL, // URL для великого зображення\n        tags, // Опис зображення\n        likes, // Кількість лайків\n        views, // Кількість переглядів\n        comments, // Кількість коментарів\n        downloads, // Кількість завантажень\n      }) => {\n        //Виводжу  дані, які обробляються.\n        console.log('Обробка зображення:', {\n          webformatURL,\n          largeImageURL,\n          tags,\n        });\n        return `\n          <li class=\"gallery-item\">\n            <a href=\"${largeImageURL}\" class=\"gallery-link\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            </a>\n          <div class=\"info\">\n          <p><b>Likes:</b> ${likes}</p>\n          <p><b>Views:</b> ${views}</p>\n          <p><b>Comments:</b> ${comments}</p>\n          <p><b>Downloads:</b> ${downloads}</p>\n        </div>\n      </li>`;\n      }\n  )\n    \n//Метод .join('') перетворює масив рядків, отриманих після виконання .map(), в єдиний рядок.\n    .join('');\n\n// Додаю згенеровану розмітку в контейнер галереї\n  galleryContainer.insertAdjacentHTML('beforeend', markup);\n \n\n// Перевіряю чи вже існує екземпляр SimpleLightbox\n  if (lightbox) {\n  lightbox.refresh(); // Якщо так,оновлюю існуючий екземпляр лайтбоксу для нових елементів\n  } else {\n\n//створюю новий екземпляр SimpleLightbox\n  lightbox = new SimpleLightbox('.gallery a', {\n    captionsData: 'alt', // Використовую атрибут \"alt\" для підписів зображення\n    captionDelay: 250, // Затримка перед показом підпису\n    });\n\n    //перевіряю створення\n    // console.log('Створено новий екземпляр SimpleLightbox:', lightbox);\n  }\n}\n\n// Функція для очищення галереї\n  export function clearGallery() {\n  galleryContainer.innerHTML = ''; // видаляю весь HTML-контент с контейнера галереї\n \n}\n\n// Функція для відображення лоадера\n  export function showLoader() {\n    \n    // console.log('Виклик функції showLoader.'); //  виклику функції\n    \n    document.body.classList.add('loading'); // присвоюю тегу <body>  клас \"loading\" який вмикає анимацію через \n    \n  // console.log('Клас \"loading\" додано до тега <body>.'); // підтвердження додавання класу після невірного вводу\n}\n\n// Функція для приховування\nexport function hideLoader() {\n    \n  // console.log('Виклик функції hideLoader.'); //  виклик \n  \n  document.body.classList.remove('loading'); // Видаляю клас \"loading\" з <body>, щоб приховати стилі лоадера\n  \n  // console.log('Клас \"loading\" видалено з тега <body>.'); //  підтвердження видалення класу\n}\n","/*Призначення: Основна логіка програми, яка пов'язує всі частини разом.\n\nФункція та дії:\n 1.функція getImagesByQuery(query) для отримання даних із API Pixabay (імпортована з api.js).\n  -Викликає функції з render-functions.js :\n  -clearGallery(): Очищає галерею перед новим пошуком.\n  -createGallery(images): Відображає нові зображення на сторінці.\n  -showLoader() та hideLoader(): Керує відображенням лоадера під час виконання запитів.\n  -Обробляє події введення користувачем тексту у форму пошуку.*/\n\n\n\n/* Імпортую функції з інших файлів для роботи із запитами та створення і показу галереі.Цей імпорт дозволяє використовувати функцію для запитів до API Pixabay*/\n  import { getImagesByQuery } from './js/pixabay-api.js';\n  import {\n  createGallery,\n  clearGallery,\n  showLoader,\n  hideLoader,\n} from './js/render-functions.js';\n\n// Імпортую бібліотеку для повідомлення\n  import iziToast from 'izitoast';\n  import 'izitoast/dist/css/iziToast.min.css';\n\n// Знаходжу елементи форми та поля вводу\n  const form = document.querySelector('.form'); // елемент форми за класом \"form\"\n  const input = form.querySelector('input[name=\"search-text\"]'); //поле вводу тексту за ім'ям \"search-text\"\n\n/* Чекаю завантаження DOM\n Ця подія гарантує, що весь HTML завантажено перед виконанням скриптів*/\ndocument.addEventListener('DOMContentLoaded', () => {\n  \n});\n\n/* Додаю обробник події на відправку форми\n Цей обробник викликається кожного разу, коли користувач натискає кнопку відправлення форми. Його основна мета — виконати пошук зображень, базуючись на введеному тексті.*/\nform.addEventListener('submit', event => {\n\n//Запобігаю перезавантаженню сторінки за замовчуванням при сабміті форми\n  event.preventDefault();\n\n  // перевірка події submit\n  // console.log('Форма відправлена.');\n\n// Отримую та очищую введений текст\n  const query = input.value.trim(); // Вилучаю зайві пробіли з обох боків введеного тексту\n\n  //перевірка отриманого значення\n  // console.log('Пошуковий запит:', query);\n\n// Перевіряю, чи поле введення не порожнє\n  if (!query) {\n\n// Показую помилку користувачеві через повідомлення\n    iziToast.error({\n      title: 'Помилка',\n      message: 'Будь ласка, введіть пошуковий запит.',\n      position: 'topRight',\n    });\n\n    \n    return; // Завершую виконання функції\n  }\n\n// Очищую галерею та показуємо лоадер\n  clearGallery(); // Видаляю попередні результати пошуку\n  showLoader(); // Відображаю анімацію завантаження\n\n// Виконую запит до API та обробляю результати\n  getImagesByQuery(query)\n    \n    //обробляю успішний результат\n    .then(data => {\n\n      // console.log('Після виклику getImagesByQuery. Отримано дані:', data); // підтвержую отримання відповіді від API\n\n// Перевіряю, чи є результати у відповіді\n      if (!data.hits || data.hits.length === 0) {\n\n/*Я перевіряю, чи існує масив \"hits\" у відповіді API та чи містить він хоча б один елемент.Якщо масив \"hits\" відсутній або порожній, це означає, що результатів пошуку немає.У цьому випадку я показуємо відповідну інфориацію користувачеві через повідомлнення.Назву масива я отримую з публічного сервіса API Pixabay коли роблю запит*/\n        iziToast.info({\n          title: 'Нічого не знайдено',\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n          position: 'topRight',\n        });\n\n        // console.log('Масив hits порожній або не існує.'); // підтвердження відсутності результатів\n\n        return; // Завершую виконання функції\n      }\n\n// Створюю галерею з отриманих даних\n  createGallery(data.hits); // Використовую отриманий масив зображень для створення галереї\n\n      //Виводжу інформацію  про створення галереї\n      // console.log('Галерея створена. Кількість зображень:', data.hits.length);\n\n// Відображаю успішне повідомлення\n      iziToast.success({\n        title: 'Успіх',\n        message: `Знайдено ${data.hits.length} зображень.`,\n        position: 'topRight',\n        timeout: 3000,\n      });\n    })\n    //обробляю помилку\n    .catch(error => {\n      // Відображаю повідомлення про помилку\n      iziToast.error({\n        title: 'Помилка',\n        message: 'Не вдалося завантажити зображення. Спробуйте пізніше.',\n        position: 'topRight',\n      });\n    })\n    .finally(() => {\n      // Ховаю лоадер та очищую поле вводу\n      hideLoader(); // Приховую анімацію завантаження\n      input.value = ''; // Очищаю текстове поле\n\n      // Лог завершення операції\n      // console.log('Лоадер схований, поле введення очищене.');\n    });\n});\n"],"names":["API_KEY","BASE_URL","getImagesByQuery","query","params","axios","response","error","galleryContainer","lightbox","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","clearGallery","showLoader","hideLoader","form","input","event","iziToast","data"],"mappings":"owBAoBE,MAAMA,EAAU,qCAEVC,EAAW,2BAKZ,SAASC,EAAiBC,EAAO,CAMtC,MAAMC,EAAS,CACb,IAAKJ,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,GACZ,SAAU,EACd,EAOE,OACEE,EACG,IAAIJ,EAAU,CAAE,OAAAG,EAAQ,EAGxB,KAAKE,GAAYA,EAAS,IAAI,EAG9B,MAAMC,GAAS,CACd,MAAMA,CACd,CAAO,CAEP,CCnCE,MAAMC,EAAmB,SAAS,cAAc,UAAU,EAK1D,IAAIC,EAAW,KAIV,SAASC,EAAcC,EAAQ,CAKpC,MAAMC,EAASD,EACZ,IACC,CAAC,CACC,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,KAEQ,QAAQ,IAAI,sBAAuB,CACjC,aAAAN,EACA,cAAAC,EACA,KAAAC,CACV,CAAS,EACM;AAAA;AAAA,uBAEQD,CAAa;AAAA,wBACZD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA,6BAGrBC,CAAK;AAAA,6BACLC,CAAK;AAAA,gCACFC,CAAQ;AAAA,iCACPC,CAAS;AAAA;AAAA,aAIvC,EAGE,KAAK,EAAE,EAGVX,EAAiB,mBAAmB,YAAaI,CAAM,EAInDH,EACJA,EAAS,QAAO,EAIhBA,EAAW,IAAIW,EAAe,aAAc,CAC1C,aAAc,MACd,aAAc,GAClB,CAAK,CAKL,CAGS,SAASC,GAAe,CAC/Bb,EAAiB,UAAY,EAE/B,CAGS,SAASc,GAAa,CAI3B,SAAS,KAAK,UAAU,IAAI,SAAS,CAGzC,CAGO,SAASC,GAAa,CAI3B,SAAS,KAAK,UAAU,OAAO,SAAS,CAG1C,CC3FE,MAAMC,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAQD,EAAK,cAAc,2BAA2B,EAI9D,SAAS,iBAAiB,mBAAoB,IAAM,CAEpD,CAAC,EAIDA,EAAK,iBAAiB,SAAUE,GAAS,CAGvCA,EAAM,eAAc,EAMpB,MAAMvB,EAAQsB,EAAM,MAAM,KAAI,EAM9B,GAAI,CAACtB,EAAO,CAGVwB,EAAS,MAAM,CACb,MAAO,UACP,QAAS,uCACT,SAAU,UAChB,CAAK,EAGD,MACD,CAGDN,IACAC,IAGApB,EAAiBC,CAAK,EAGnB,KAAKyB,GAAQ,CAKZ,GAAI,CAACA,EAAK,MAAQA,EAAK,KAAK,SAAW,EAAG,CAGxCD,EAAS,KAAK,CACZ,MAAO,qBACP,QACE,2EACF,SAAU,UACpB,CAAS,EAID,MACD,CAGLjB,EAAckB,EAAK,IAAI,EAMnBD,EAAS,QAAQ,CACf,MAAO,QACP,QAAS,YAAYC,EAAK,KAAK,MAAM,cACrC,SAAU,WACV,QAAS,GACjB,CAAO,CACP,CAAK,EAEA,MAAMrB,GAAS,CAEdoB,EAAS,MAAM,CACb,MAAO,UACP,QAAS,wDACT,SAAU,UAClB,CAAO,CACP,CAAK,EACA,QAAQ,IAAM,CAEbJ,IACAE,EAAM,MAAQ,EAIpB,CAAK,CACL,CAAC"}